# ========== TU CONFIGURACIÓN ACTUAL (MANTENER TAL COMO ESTÁ) ==========
# Configuración principal de la aplicación
server.port=${PORT:8080}

# Configuración de base de datos con variables de entorno DE RENDER
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuraciones de JPA
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always
spring.jpa.show-sql=false

# Configuración de Vaadin
spring.mustache.check-template-location=false
vaadin.launch-browser=false
vaadin.allowed-packages=com.vaadin,org.vaadin,com.monitoring.server
vaadin.productionMode=${VAADIN_PRODUCTION_MODE:true}
vaadin.devmode.folder-access-mode=none
vaadin.frontend.timeout=300

# ===============================================
# AUTH0 CONFIGURATION - USANDO VARIABLES DE RENDER
# ===============================================
auth0.domain=${AUTH0_DOMAIN}
auth0.clientId=${AUTH0_CLIENT_ID}
auth0.clientSecret=${AUTH0_CLIENT_SECRET}
auth0.audience=${AUTH0_AUDIENCE}
app.baseUrl=${APP_BASE_URL}

# ===============================================
# SPRING SECURITY OAUTH2 CONFIGURATION
# ===============================================
spring.security.oauth2.client.registration.auth0.client-id=${auth0.clientId}
spring.security.oauth2.client.registration.auth0.client-secret=${auth0.clientSecret}
spring.security.oauth2.client.registration.auth0.scope=openid,profile,email
spring.security.oauth2.client.registration.auth0.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.auth0.redirect-uri=${app.baseUrl}/login/oauth2/code/auth0

spring.security.oauth2.client.provider.auth0.authorization-uri=https://${auth0.domain}/authorize
spring.security.oauth2.client.provider.auth0.token-uri=https://${auth0.domain}/oauth/token
spring.security.oauth2.client.provider.auth0.user-info-uri=https://${auth0.domain}/userinfo
spring.security.oauth2.client.provider.auth0.user-name-attribute=sub

# JWT Resource Server
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://${auth0.domain}/
spring.security.oauth2.resourceserver.jwt.audiences=${auth0.audience}

# ===============================================
# LOGGING CONFIGURATION
# ===============================================
logging.level.org.atmosphere=warn
logging.level.com.monitoring=info
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:INFO}
logging.level.com.monitoring.server.security=${SECURITY_LOG_LEVEL:INFO}

# ===============================================
# ACTUATOR CONFIGURATION
# ===============================================
management.endpoints.web.exposure.include=health,metrics,info

# ===============================================
# SYSTEM MONITORING CONFIGURATION
# ===============================================
system.metric.collection.interval=${METRIC_COLLECTION_INTERVAL:10000}
system.process.collection.interval=${PROCESS_COLLECTION_INTERVAL:30000}
system.cpu.threshold=${CPU_THRESHOLD:80}
system.memory.threshold=${MEMORY_THRESHOLD:80}
system.disk.threshold=${DISK_THRESHOLD:90}

# ===============================================
# DEBUG LOGGING - TEMPORAL PARA DIAGNOSTICAR
# ===============================================
logging.level.com.monitoring.server.config=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG
logging.level.org.springframework.security.web.authentication=DEBUG
logging.level.org.springframework.security.oauth2.client=DEBUG

# ========== AGREGAR ESTAS LÍNEAS AL FINAL (NUEVAS) ==========
# ===============================================
# CONFIGURACIONES ADICIONALES PARA TIEMPO REAL Y CRON
# ===============================================

# Configuración para tareas programadas y CRON jobs
spring.task.scheduling.pool.size=${SCHEDULING_POOL_SIZE:5}
spring.task.execution.pool.core-size=${EXECUTION_CORE_SIZE:3}
spring.task.execution.pool.max-size=${EXECUTION_MAX_SIZE:8}
spring.task.execution.pool.queue-capacity=${EXECUTION_QUEUE_CAPACITY:25}

# Configuración para WebSockets
spring.websocket.sockjs.transport.websocket.message-size-limit=${WS_MESSAGE_SIZE:8192}
spring.websocket.sockjs.transport.websocket.send-time-limit=${WS_SEND_TIME_LIMIT:20000}
spring.websocket.sockjs.transport.websocket.send-buffer-size-limit=${WS_BUFFER_SIZE:512000}

# ===============================================
# CONFIGURACIÓN AVANZADA DE MÉTRICAS (COMPATIBILIDAD CON EXISTENTE)
# ===============================================
server-monitor.metrics.collection-interval=${METRIC_COLLECTION_INTERVAL:5000}
server-monitor.metrics.cleanup-interval=${METRICS_CLEANUP_INTERVAL:3600000}
server-monitor.metrics.retention-days=${METRICS_RETENTION_DAYS:30}
server-monitor.metrics.max-points-per-chart=${METRICS_MAX_POINTS:20}

# Configuración para procesos (compatible con configuración existente)
server-monitor.processes.collection-interval=${PROCESS_COLLECTION_INTERVAL:10000}
server-monitor.processes.max-heavy-processes=${MAX_HEAVY_PROCESSES:10}

# ===============================================
# CONFIGURACIÓN PARA EXPORTACIÓN
# ===============================================
# server-monitor.export.temp-directory property defined below in EXPORT SYSTEM CONFIGURATION section
# server-monitor.export.max-file-size-mb property removed (duplicate/unknown)
# server-monitor.export.enabled property removed due to unknown and duplicate property errors

# ===============================================
# LOGGING ESPECÍFICO PARA NUEVAS FUNCIONES
# ===============================================
logging.level.com.monitoring.server.service.impl.MetricCollectorService=${METRIC_COLLECTOR_LOG_LEVEL:INFO}
logging.level.org.springframework.scheduling=${SCHEDULING_LOG_LEVEL:INFO}
logging.level.org.springframework.websocket=${WEBSOCKET_LOG_LEVEL:INFO}

# ===============================================
# OPTIMIZACIONES DE RENDIMIENTO PARA PRODUCCIÓN
# ===============================================
spring.datasource.hikari.maximum-pool-size=${DB_MAX_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:2}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:300000}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:20000}
spring.datasource.hikari.leak-detection-threshold=${DB_LEAK_DETECTION:60000}

# Cache configuration
spring.cache.type=${CACHE_TYPE:simple}

# ===============================================
# CONFIGURACIÓN CORS PARA WEBSOCKETS
# ===============================================
server-monitor.cors.allowed-origins=${ALLOWED_ORIGINS:${app.baseUrl},http://localhost:8080}
server-monitor.cors.allowed-methods=${ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
server-monitor.cors.allowed-headers=${ALLOWED_HEADERS:*}

# ===============================================
# CONFIGURACIÓN ESPECÍFICA PARA RENDER DEPLOY
# ===============================================
server.tomcat.threads.max=${TOMCAT_MAX_THREADS:50}
server.tomcat.threads.min-spare=${TOMCAT_MIN_THREADS:5}
server.tomcat.max-connections=${TOMCAT_MAX_CONNECTIONS:200}
server.tomcat.connection-timeout=${TOMCAT_CONNECTION_TIMEOUT:20000}
spring.transaction.default-timeout=${TRANSACTION_TIMEOUT:30}

# ===============================================
# CONFIGURACIÓN DE HEALTH CHECKS PARA RENDER
# ===============================================
management.endpoint.health.show-details=WHEN_AUTHORIZED
management.endpoint.metrics.enabled=${METRICS_ENDPOINT_ENABLED:true}
management.health.websocket.enabled=${HEALTH_WEBSOCKET_ENABLED:true}

# ===============================================
# EXPORT SYSTEM CONFIGURATION
# ===============================================
# Sistema de exportación habilitado
server-monitor.export.enabled=${EXPORT_ENABLED:true}

# Directorio temporal para archivos de exportación
server-monitor.export.temp-directory=${EXPORT_TEMP_DIR:/tmp/server-monitor-exports}

# Límites de archivos y datos
server-monitor.export.max-file-size-mb=${EXPORT_MAX_FILE_SIZE:50}
server-monitor.export.max-records-per-export=${EXPORT_MAX_RECORDS:100000}

# Timeout para exportaciones asíncronas (en segundos)
server-monitor.export.async-timeout-seconds=${EXPORT_TIMEOUT:300}

# ===============================================
# CONFIGURACIÓN CORPORATIVA PARA REPORTES
# ===============================================
# Información de la empresa en reportes
server-monitor.export.company-name=${EXPORT_COMPANY_NAME:Server Monitor Enterprise}
server-monitor.export.company-logo=${EXPORT_COMPANY_LOGO:/images/company-logo.png}

# ===============================================
# CONFIGURACIÓN ESPECÍFICA DE PDF
# ===============================================
# Incluir gráficos en PDFs (true/false)
server-monitor.export.include-pdf-charts=${EXPORT_PDF_CHARTS:true}

# Metadatos del PDF
server-monitor.export.pdf-author=${EXPORT_PDF_AUTHOR:Server Monitor System}
server-monitor.export.pdf-creator=${EXPORT_PDF_CREATOR:Server Monitor v2.0}

# ===============================================
# CONFIGURACIÓN ESPECÍFICA DE CSV
# ===============================================
# Separador de campos CSV
server-monitor.export.csv-separator=${EXPORT_CSV_SEPARATOR:,}

# Codificación de archivos CSV
server-monitor.export.csv-encoding=${EXPORT_CSV_ENCODING:UTF-8}

# Incluir headers en CSV (true/false)
server-monitor.export.csv-include-headers=${EXPORT_CSV_HEADERS:true}

# ===============================================
# THREADING PARA EXPORTACIÓN ASÍNCRONA
# ===============================================
# Pool de threads específico para exportaciones
spring.task.execution.export.core-size=${EXPORT_CORE_THREADS:2}
spring.task.execution.export.max-size=${EXPORT_MAX_THREADS:5}
spring.task.execution.export.queue-capacity=${EXPORT_QUEUE_CAPACITY:100}
spring.task.execution.export.thread-name-prefix=${EXPORT_THREAD_PREFIX:ServerMonitor-Export-}

# ===============================================
# SEGURIDAD Y LÍMITES DE EXPORTACIÓN
# ===============================================
# Límites de descarga por usuario (opcional)
server-monitor.export.rate-limit-enabled=${EXPORT_RATE_LIMIT_ENABLED:false}
server-monitor.export.max-exports-per-hour=${EXPORT_MAX_PER_HOUR:10}

# Limpieza automática de archivos temporales (en minutos)
server-monitor.export.cleanup-interval-minutes=${EXPORT_CLEANUP_INTERVAL:60}

# ===============================================
# CONFIGURACIÓN PARA GRÁFICOS EN REPORTES
# ===============================================
# Ancho y alto de gráficos en píxeles
server-monitor.export.chart-width=${EXPORT_CHART_WIDTH:800}
server-monitor.export.chart-height=${EXPORT_CHART_HEIGHT:400}

# Calidad de imágenes (0.1 a 1.0)
server-monitor.export.image-quality=${EXPORT_IMAGE_QUALITY:0.9}

# ===============================================
# LOGGING ESPECÍFICO PARA EXPORTACIÓN
# ===============================================
# Nivel de logging para servicios de exportación
logging.level.com.monitoring.server.service.impl.ExportService=${EXPORT_LOG_LEVEL:INFO}
logging.level.com.monitoring.server.service.impl.CSVExportService=${EXPORT_LOG_LEVEL:INFO}
logging.level.com.monitoring.server.service.impl.PDFExportService=${EXPORT_LOG_LEVEL:INFO}
logging.level.com.monitoring.server.service.impl.ExcelExportService=${EXPORT_LOG_LEVEL:INFO}
logging.level.com.monitoring.server.controller.ExportController=${EXPORT_LOG_LEVEL:INFO}

# ===============================================
# CONFIGURACIÓN OPTIMIZADA PARA RENDER
# ===============================================
# Configuración específica para el entorno de Render
server-monitor.export.render-optimized=${RENDER_OPTIMIZED:true}

# Usar memoria limitada para grandes exportaciones
server-monitor.export.memory-efficient=${EXPORT_MEMORY_EFFICIENT:true}

# Compresión automática para archivos grandes
server-monitor.export.auto-compress=${EXPORT_AUTO_COMPRESS:true}

# ===============================================
# VARIABLES DE ENTORNO PARA RENDER
# ===============================================
# Estas variables debes configurarlas en Render Dashboard:
#
# EXPORT_ENABLED=true
# EXPORT_TEMP_DIR=/tmp/server-monitor-exports
# EXPORT_MAX_FILE_SIZE=50
# EXPORT_MAX_RECORDS=100000
# EXPORT_TIMEOUT=300
# EXPORT_COMPANY_NAME=Server Monitor Enterprise
# EXPORT_PDF_CHARTS=true
# EXPORT_CSV_SEPARATOR=,
# EXPORT_CSV_ENCODING=UTF-8
# EXPORT_CORE_THREADS=2
# EXPORT_MAX_THREADS=5
# EXPORT_QUEUE_CAPACITY=100
# EXPORT_LOG_LEVEL=INFO
# RENDER_OPTIMIZED=true
# EXPORT_MEMORY_EFFICIENT=true
# EXPORT_AUTO_COMPRESS=true

# ===============================================
# CONFIGURACIÓN DE MULTIPART PARA ARCHIVOS GRANDES
# ===============================================
# Tamaño máximo de archivos multipart (compatible con exportación)
spring.servlet.multipart.max-file-size=${MULTIPART_MAX_FILE_SIZE:50MB}
spring.servlet.multipart.max-request-size=${MULTIPART_MAX_REQUEST_SIZE:50MB}

# ===============================================
# CONFIGURACIÓN ADICIONAL DE PERFORMANCE
# ===============================================
# Cache para consultas de exportación
spring.jpa.properties.hibernate.query.plan_cache_max_size=${QUERY_CACHE_SIZE:128}
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size=${QUERY_PARAM_CACHE_SIZE:32}

# Optimización de batch para grandes datasets
spring.jpa.properties.hibernate.jdbc.batch_size=${HIBERNATE_BATCH_SIZE:50}
spring.jpa.properties.hibernate.order_inserts=${HIBERNATE_ORDER_INSERTS:true}
spring.jpa.properties.hibernate.order_updates=${HIBERNATE_ORDER_UPDATES:true}

# ===============================================
# CONFIGURACIÓN DE CORS PARA ENDPOINTS DE EXPORTACIÓN
# ===============================================
# Permitir descargas desde el frontend
server-monitor.export.cors-enabled=${EXPORT_CORS_ENABLED:true}
server-monitor.export.allowed-origins=${EXPORT_ALLOWED_ORIGINS:${app.baseUrl},http://localhost:8080}

# ===============================================
# MONITOREO Y MÉTRICAS DE EXPORTACIÓN
# ===============================================
# Habilitar métricas de exportación en actuator
management.metrics.export.enabled=${EXPORT_METRICS_ENABLED:true}
management.endpoint.metrics.cache.time-to-live=${METRICS_CACHE_TTL:30s}

# ===============================================
# CONFIGURACIÓN ESPECÍFICA PARA DIFERENTES ENTORNOS
# ===============================================
# Detectar automáticamente el entorno
server-monitor.export.environment=${EXPORT_ENVIRONMENT:production}

# Configuración específica para desarrollo (si es necesario)
server-monitor.export.dev-mode=${EXPORT_DEV_MODE:false}

# ===============================================
# CONFIGURACIÓN DE BACKUP Y RECOVERY
# ===============================================
# Backup automático de configuraciones de exportación
server-monitor.export.backup-enabled=${EXPORT_BACKUP_ENABLED:false}
server-monitor.export.backup-interval-hours=${EXPORT_BACKUP_INTERVAL:24}

# ===============================================
# CONFIGURACIÓN AVANZADA DE REPORTES
# ===============================================
# Incluir análisis automático en reportes
server-monitor.export.auto-analysis-enabled=${EXPORT_AUTO_ANALYSIS:true}

# Incluir recomendaciones automáticas
server-monitor.export.auto-recommendations-enabled=${EXPORT_AUTO_RECOMMENDATIONS:true}

# Límite de datos para análisis automático
server-monitor.export.analysis-data-limit=${EXPORT_ANALYSIS_LIMIT:10000}